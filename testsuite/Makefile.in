# -*- Makefile -*-
#
#  @(#) $Id$
#
# Copyright (c) 2006 by The PolyBoRi Team
#
# $Author$
#
# $Log$
# Revision 1.3  2007/11/06 15:03:39  dreyer
# CHANGE: More generic copyright
#
# Revision 1.2  2006/03/09 14:41:59  dreyer
# + changed CUDDDIR
#
# Revision 1.1.1.1  2006/03/09 14:35:25  dreyer
# + Project started
#


############################################################################
#
# set a desired architecture and make sure there are corresponding
# macros or variables already available. A _D suffix indicates a
# debugging target.
#
# current: LINUX, WIN, MAC, SUN

ARCH		= $(ARCH_$(OSTYPE))

DISTRI		= $(DISTRI_$(DISTRI_$(VENDOR)))

SHELL		= /bin/sh

RMFORCED	= $(RMFORCED_$(RMFORCED_$(ARCH)))

RANLIB		= ranlib

CUDDDIR		= ../Cudd/

PBORIDIR	= ../polybori/

INCLUDE 	= $(CUDDDIR)/include $(PBORIDIR)/include include


SRCDIR		= src
INCDIR		= $(INCLUDE:%=-I%)


ARCH_linux-gnulibc1 = LINUX
ARCH_linux	= LINUX
ARCH_darwin	= MAC
ARCH_solaris	= SUN

ARCH_		= $(ARC_$(OS))
ARC_	        = $(if $(IS_MAC),MAC,$(if $(windir),WIN,LINUX))
ARC_Windows_NT	= WIN
IS_MAC		= $(findstring darwin,$(shell echo $$OSTYPE))

CAT		= $(CAT_$(CAT_$(ARCH)))
PERL		= perl
CD		= cd

FILTERDEP	= $(FILTERDEP_$(FILTERDEP_$(ARCH)))

# defaults values
CAT_		= cat
RMFORCED_	= rm -f
FILTERDEP_	= sed -e "s/^[^ ]*:/src\/&/"


DISTRI_		= SLG

#############################################################################
#
# Common definitions for multiple architectures like WIN and
# LINUX. If no special flags/defines are neccessary you need not add
# anything here.
#

###############################################################################
#
# WIN - using minGW
#

CC_WIN_D	= cc
CC_WIN		= cc

CCC_WIN_D	= c++ 
CCC_WIN		= c++ 

DEPEND_WIN_D    = c++ -MM -MG
DEPEND_WIN    	= c++ -MM -MG

AR_WIN_D	= ar
AR_WIN		= ar
ARFLAGS_WIN_D	= cr
ARFLAGS_WIN	= cr

CXXFLAGS_WIN_D  = -ftemplate-depth-30 -ansi
CXXFLAGS_WIN	= -mcpu=i486 -O3 -ansi -ftemplate-depth-30 -ansi

DEFS_WIN_D	= -D__DEBUG 
DEFS_WIN	= -DNDEBUG 

LDFLAGS_WIN_D	= 
LDFLAGS_WIN	= 

# this currently uses perl, since we don't have cat and rm available

CAT_WIN		= _WIN
CAT__WIN	= $(PERL) -n -e "print" 
CAT_WIN_D	= $(CAT_WIN)

RMFORCED__WIN	= echo dummy file > core && del /Q /F core
RMFORCED_WIN	= _WIN
RMFORCED_WIN_D	= $(RMFORCED_WIN)

FILTERDEP__WIN 	= $(PERL) -n -e "s/(^[^ ]*:)/src\/\1/;print"
FILTERDEP_WIN 	= _WIN
FILTERDEP_WIN_D	= $(FILTERDEP_WIN)


PSRCS_WIN	= SECOND
PSRCS_WIN_D	= $(PSRCS_WIN)

PREDEP_WIN 	= $(DEPCMD) $(SRCSFIRST) | $(FILTERDEP) > $(PREDEPFILE)
PREDEP_WIN_D	= $(PREDEP_WIN)

PREDEPFILE_WIN	 = Make.predep
PREDEPFILE_WIN_D = $(PREDEPFILE_WIN)

###############################################################################
#
# MAC
#

CC_MAC_D	= cc
CC_MAC		= cc

CCC_MAC_D	= c++
CCC_MAC		= c++

DEPEND_MAC_D    = c++ -MM -isystem 
DEPEND_MAC    	= c++ -MM -isystem 

AR_MAC_D	= ar
AR_MAC		= ar
ARFLAGS_MAC_D	= cr
ARFLAGS_MAC	= cr

CXXFLAGS_MAC_D  = -ftemplate-depth-30 -ansi
CXXFLAGS_MAC	= -O3 -ftemplate-depth-30 -ansi -Wno-long-double
DEFS_MAC_D	= -D__DEBUG 
DEFS_MAC	= -DNDEBUG 

LDFLAGS_MAC_D	= 
LDFLAGS_MAC	= 

###############################################################################
#
# SUN
#

CC_SUN_D	= gcc
CC_SUN		= gcc

CCC_SUN_D	= c++ 
CCC_SUN		= c++ 

DEPEND_SUN_D    = c++ -MM -MG
DEPEND_SUN    	= c++ -MM -MG

AR_SUN_D	= ar
AR_SUN		= ar
ARFLAGS_SUN_D	= cr
ARFLAGS_SUN	= cr

CXXFLAGS_SUN_D  = -ftemplate-depth-30 -pipe -gstabs+ -ansi -fno-common -pipe \
		  -Wall -Wno-unused
CXXFLAGS_SUN	= -ftemplate-depth-30 -pipe -O6 -ansi -fomit-frame-pointer \
		  -funroll-loops -mcpu=ultrasparc
DEFS_SUN_D	= -Dsun -D_POSIX_SOURCE -D_XPG4 -D__DEBUG 
DEFS_SUN	= -Dsun -D_POSIX_SOURCE -D_XPG4 -DNDEBUG 

LDFLAGS_SUN_D	= -lsocket -lnsl
LDFLAGS_SUN	= -lsocket -lnsl -s

###############################################################################
#
# Linux 
#

# slg linux

CC_LINUX_D_SLG	= egcc
CC_LINUX_SLG	= egcc

CCC_LINUX_D_SLG	= ec++
CCC_LINUX_SLG	= ec++

# suse linux
CC_LINUX_D_SUSE	= gcc
CC_LINUX_SUSE	= gcc

CCC_LINUX_D_SUSE	= c++
CCC_LINUX_SUSE		= c++

CC_LINUX_D	= $(CC_LINUX_D_$(DISTRI))
CC_LINUX	= $(CC_LINUX_$(DISTRI))

CCC_LINUX_D	= $(CCC_LINUX_D_$(DISTRI))
CCC_LINUX	= $(CCC_LINUX_$(DISTRI))

DEPEND_LINUX_D  = $(CCC_LINUX_D_$(DISTRI)) -MM -MG
DEPEND_LINUX    = $(CCC_LINUX_$(DISTRI)) -MM -MG

CXXFLAGS_LINUX_D= -g -ggdb -ansi -Wall -pedantic -fno-common 
CXXFLAGS_LINUX 	= $(CXXFLAGS_$(DISTRI)) -O4 -ansi 

CXXFLAGS_SLG	= -m486 
CXXFLAGS_SUSE	= -mcpu=i486 

DEFS_LINUX_D	= -DDEBUG $(DEFS_LINUX)
DEFS_LINUX	= $(DEFS_$(DISTRI))

DEFS_SUSE	= 

LDFLAGS_LINUX_D	= 
LDFLAGS_LINUX	= -s

AR_LINUX_D	= ar
AR_LINUX	= ar
ARFLAGS_LINUX_D	= cr
ARFLAGS_LINUX	= cr

DISTRI_suse	= SUSE
DISTRI_SUSE	= SUSE

#############################################################################
#
# remapping of variables and macros
#
CC		= $(CC_$(ARCH))
CCC		= $(CCC_$(ARCH))
DEPEND		= $(DEPEND_$(ARCH))

CXXFLAGS	= $(CXXFLAGS_$(ARCH))
DEFS		= $(DEFS_$(ARCH)) 
LDFLAGS		= $(LDFLAGS_$(ARCH))

AR		= $(AR_$(ARCH))
ARFLAGS		= $(ARFLAGS_$(ARCH))


LDLIBS		= 
LIBDIRS		= 
INCDIRS  	= $(INCDIR)

#
# some temporarily created file scheduled for removal
#

TEMPFILES 	= core a.out .gdb_history *~ *.bak *.s *.BAK *.o
CONFIGFILES	= $(PREDEPFILE) Make.depend Makefile $(TESTDIR)/Makefile


#
#  Come on... let the fun begin!
#

PROJNAME	= polybori
TARGET_LIB	= lib$(PROJNAME).a

COMMONSRCS	= 
PROGSRCS	= testring.cc errorcodes.cc

PSRCS		= $(PROGSRCS:%=$(SRCDIR)/%)
PROGDIR		= .
SRCS		= $(COMMONSRCS:%=$(SRCDIR)/%)
OBJS 		= $(SRCS:.cc=.o)

# Test suite related stuff

TARGET_TEST	= $(PROGSRCS:%.cc=$(PROGDIR)/%$(EXE))

#$(PSRCS:.cc=$(EXE))

# The target
TARGET		= $(TARGET_TEST)

#
# When all things are in the right place, no further editing should
# have to be done beyond this point. Proceed with fingers crossed!
#

CCCCMD		= $(CCC) $(CXXFLAGS) $(INCDIRS) $(DEFS)
PREDEP		= $(PREDEP_$(ARCH))
DEPCMD		= $(DEPEND) $(DEFS) $(INCDIRS)

PREDEPFILE	= $(PREDEPFILE_$(ARCH))

# VPATH macro defines position of object and source files (e.g. HPUX make)
VPATH 		= $(SRCDIR)

target:	${TARGET}

$(PROGDIR)/%$(EXE): $(SRCDIR)/%.o $(OBJS)
	$(CCC) $(CXXFLAGS) $(LDFLAGS) -o $@ $(SRCDIR)/$*.o $(OBJS) $(LIBS) -lm


%.o: %.cc
	$(CCC) $(CXXFLAGS) $(INCDIRS) $(DEFS) -o $*.o -c $<

depend:
	-@echo "checking dependencies ..."
	-@$(PREDEP)
	-@$(DEPCMD) $(SRCS) $(PSRCS)| $(FILTERDEP) > Make.depend
	-@echo "creating Makefile"
	-@($(CAT) Makefile.in $(PREDEPFILE) Make.depend ) > Makefile

arch:
	-@echo 
	-@echo "architecture is $(ARCH)"
	-@echo

distri:
	-@echo 
	-@echo "distribution is $(DISTRI)"
	-@echo

clean:
	-@echo 'removing objects and tmp files ...'
	-@$(RMFORCED) $(TEMPFILES)
	-@$(CD) $(SRCDIR) && $(RMFORCED) $(TEMPFILES)

realclean: clean
	-@echo 'removing target and config files ...'
	-@$(RMFORCED) ${TARGET} $(CONFIGFILES)

print: 
	echo $(TARGET)

# $Id$
#
# obj: CUDD's C++ interface
#---------------------------------------------------------------------------
.SUFFIXES: .o .cc #.u

CPP	= g++


# Define EXE as .exe for MS-DOS and derivatives.
EXE	=
#EXE	= .exe

MFLAG	=
ICFLAGS = -g
XCFLAGS =
CPPFLAGS =
CFLAGS	= $(ICFLAGS) $(MFLAG) $(XCFLAGS) $(CPPFLAGS)
DDDEBUG =

LINTFLAGS = 
#-u -n -DDD_STATS -DDD_CACHE_PROFILE -DDD_VERBOSE -DDD_DEBUG -DDD_UNIQUE_PROFILE

# this is to create the lint library
LINTSWITCH = -o



LIBS	= $(CUDDDIR)/obj/libobj.a $(CUDDDIR)/cudd/libcudd.a \
	$(CUDDDIR)/mtr/libmtr.a \
	$(CUDDDIR)/st/libst.a $(CUDDDIR)/util/libutil.a $(CUDDDIR)/epd/libepd.a\
	$(PBORIDIR)$(TARGET_LIB)

MNEMLIB =

BLIBS	= 
#-kL$(CUDDDIR)/obj -klobj -kL$(CUDDDIR)/cudd -klcudd -kL$(CUDDDIR)/mtr \
#	-klmtr \
#	-kL$(CUDDDIR)/st -klst -kL$(CUDDDIR)/util -klutil -kL$(CUDDDIR)/epd -klepd

LINTLIBS = 
#$(CUDDDIR)/obj/./llib-lobj.ln $(CUDDDIR)/cudd/llib-lcudd.ln \
#	$(CUDDDIR)/mtr/llib-lmtr.ln $(CUDDDIR)/st/llib-lst.ln \
#	$(CUDDDIR)/util/llib-lutil.ln $(CUDDDIR)/epd/llib-lepd.ln

LDFLAGS =

# files for the package
#P	= obj
#PSRC	= cuddObj.cc
#PHDR	= cuddObj.hh $(INCLUDE)/cudd.h
#POBJ	= $(PSRC:.cc=.o)
#PUBJ	= $(PSRC:.cc=.u)
#TARGET	= test$(P)$(EXE)
#TARGETu = test$(P)-u

# files for the test program
#SRC	= test$(P).cc
#OBJ	= $(SRC:.cc=.o)
#UBJ	= $(SRC:.cc=.u)

#------------------------------------------------------


lib$(P).a: $(POBJ)
	ar rv $@ $?
	$(RANLIB) $@

.cc.o: $(PHDR)
	$(CCC) -c $< -I$(INCLUDE) $(CFLAGS) $(DDDEBUG)

# if the header files change, recompile
#$(POBJ): $(PHDR)
#$(PUBJ): $(PHDR)
#$(OBJ): $(PHDR)
#$(UBJ): $(PHDR)

#$(TARGET): $(SRC) $(OBJ) $(HDR) $(LIBS)
#	$(PURE) $(CCC) $(CFLAGS) $(LDFLAGS) -o $@ $(OBJ) $(LIBS) $(MNEMLIB) -lm

#all: lib$(P).a lib$(P).b llib-l$(P).ln tags


#clean:
#	rm -f *.o *.u mon.out gmon.out *.pixie *.Addrs *.Counts mnem.* \
#	.pure core *.warnings

#distclean: clean
#	rm -f $(TARGET) $(TARGETu) lib*.a lib$(P).b llib-l$(P).ln \
#	*.bak *~ tags .gdb_history *.qv *.qx


#
# automatic generated dependencies and other stuff 
#
