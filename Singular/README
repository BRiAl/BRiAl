Interfacing PolyBoRi and Singular
=================================

The files in this directory are obsolete and will be removed in further versions
of PolyBoRi. This interface will be superseded by Singular's built-in pyobject
extension. 

Using PolyBoRi from pyobject is as follows:
First of all you must ensure, that PolyBoRi is installed either in the python
search path, or in Singular's binary path. PolyBoRi's default installation
target (in the system resources) will work. In case you do not have root access,
you can customize the installation:

  scons install PREFIX=/path/to/my/bin PYINSTALLPREFIX=/path/to/python/modules

where /path/to/my/bin is a user in the users path, and /path/to/python/modules
could be for instance Singular's binary directory. If you also do not have write
permission to the latter, please add a custom directory to environment
variable PYTHONPATH and use that directory for PYINSTALLPREFIX.

The following session illustrates how PolyBoRi's functionality can be accessed
from Singular:

                     SINGULAR                                 /  Development
 A Computer Algebra System for Polynomial Computations       /   version 3-1-2
                                                           0<
 by: W. Decker, G.-M. Greuel, G. Pfister, H. Schoenemann     \   Oct 2010
FB Mathematik der Universitaet, D-67653 Kaiserslautern        \
// ** executing LIB/.singularrc
> python_import("polybori");
> declare_ring(list(Block("x", 10), Block("y", 10)));
<polybori.dynamic.PyPolyBoRi.Ring object at 0xddf050>
> list polybori_ideal = (x(1)+x(2),x(2)+y(1));
> def result = groebner_basis(polybori_ideal);
> result;
[x(1) + y(1), x(2) + y(1)]
> typeof(result);
pyobject
> result[1];
x(2) + y(1)
> Auf Wiedersehen.
